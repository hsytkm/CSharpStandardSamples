// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace CSharpStandardSamples.Tests.T4
{
    [StructLayout(LayoutKind.Sequential, Size = 3)]
    readonly struct MyBytes3
    {
        public readonly byte x0, x1, x2;
        public readonly int Length => 3;
        public readonly byte this[int i]
        {
            get => i switch
            {
                0 => x0,
1 => x1,
2 => x2,
                _ => throw new IndexOutOfRangeException()
            };
        }
        public readonly IEnumerator<byte> GetEnumerator()
        {
            for (int i = 0; i < Length; ++i)
                yield return this[i];
        }
    }

    [StructLayout(LayoutKind.Sequential, Size = 5)]
    readonly struct MyBytes5
    {
        public readonly byte x0, x1, x2, x3, x4;
        public readonly int Length => 5;
        public readonly byte this[int i]
        {
            get => i switch
            {
                0 => x0,
1 => x1,
2 => x2,
3 => x3,
4 => x4,
                _ => throw new IndexOutOfRangeException()
            };
        }
        public readonly IEnumerator<byte> GetEnumerator()
        {
            for (int i = 0; i < Length; ++i)
                yield return this[i];
        }
    }

    [StructLayout(LayoutKind.Sequential, Size = 7)]
    readonly struct MyBytes7
    {
        public readonly byte x0, x1, x2, x3, x4, x5, x6;
        public readonly int Length => 7;
        public readonly byte this[int i]
        {
            get => i switch
            {
                0 => x0,
1 => x1,
2 => x2,
3 => x3,
4 => x4,
5 => x5,
6 => x6,
                _ => throw new IndexOutOfRangeException()
            };
        }
        public readonly IEnumerator<byte> GetEnumerator()
        {
            for (int i = 0; i < Length; ++i)
                yield return this[i];
        }
    }

    [StructLayout(LayoutKind.Sequential, Size = 9)]
    readonly struct MyBytes9
    {
        public readonly byte x0, x1, x2, x3, x4, x5, x6, x7, x8;
        public readonly int Length => 9;
        public readonly byte this[int i]
        {
            get => i switch
            {
                0 => x0,
1 => x1,
2 => x2,
3 => x3,
4 => x4,
5 => x5,
6 => x6,
7 => x7,
8 => x8,
                _ => throw new IndexOutOfRangeException()
            };
        }
        public readonly IEnumerator<byte> GetEnumerator()
        {
            for (int i = 0; i < Length; ++i)
                yield return this[i];
        }
    }

}