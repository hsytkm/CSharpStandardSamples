<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var _countMax = 10;

    Func<int, int, string> CreateDeclarationFields = (start, count) =>
    {
        return string.Join(", ", Enumerable.Range(start, count).Select(i => "x" + i.ToString()));
    };

    Func<int, int, string> CreateSwitchFields = (start, count) =>
    {
        return string.Join(Environment.NewLine, Enumerable.Range(start, count)
            .Select(i => i.ToString() + " => x" + i.ToString() + ","));
    };
#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace CSharpStandardSamples.Tests.T4
{
<#
    for (int counter = 3; counter < _countMax; counter += 2)    // only odd
    {
#>
    [StructLayout(LayoutKind.Sequential, Size = <#= counter #>)]
    readonly struct MyBytes<#= counter #>
    {
        public readonly byte <#= CreateDeclarationFields(0, counter) #>;
        public readonly int Length => <#= counter #>;
        public readonly byte this[int i]
        {
            get => i switch
            {
                <#= CreateSwitchFields(0, counter) #>
                _ => throw new IndexOutOfRangeException()
            };
        }
        public readonly IEnumerator<byte> GetEnumerator()
        {
            for (int i = 0; i < Length; ++i)
                yield return this[i];
        }
    }

<# } #>
}